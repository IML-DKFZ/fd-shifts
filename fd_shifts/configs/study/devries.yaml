# @package _global_

trainer:
  num_epochs: 250 # 250 has to be >1 because of incompatibility of lighting eval with psuedo test
  val_every_n_epoch: 1 #has to be 1 because of schedulers
  # val splits:
  # - null: no validation set is created
  # - "devries": split the first 1000 cases of the iid test set as validation set
  # - cv: split 10% of the training set as validation set
  # - repro_confidnet: use the same cv split as Corbiere et al. 2020 (ConfidNet)
  val_split: "devries"
  do_val: False
  batch_size: 128
  resume_from_ckpt: False
  benchmark: True # set to false if input size varies during training!
  fast_dev_run: False # True/Fals
  lr_scheduler:
    name: "CosineAnnealing" # "MultiStep" "CosineAnnealing"
    milestones: [60, 120, 160] # lighting only steps schedulre during validation. so milestones need to be divisible by val_every_n_epoch
    max_epochs: ${trainer.num_epochs}
    gamma: 0.2
  optimizer:
    name: SGD
    learning_rate: 1e-1
    momentum: 0.9
    nesterov: True
    weight_decay: 0.0005
  callbacks:
    model_checkpoint:
    monitor:
    learning_rate_monitor:

model:
  name: devries_and_dg_model # devries_model #
  fc_dim: 512
  dg_reward: -1 # dummy
  avg_pool: True
  dropout_rate: 0 # 0 sets dropout to false
  monitor_mcd_samples: 50 # only activated if "mcd" substring in train or val monitor confids.
  test_mcd_samples: 50 # only activated if "mcd" substring in test confids.
  budget: 0.3
  network:
    name: devries_and_enc #devries_and_enc      # confidnet_small_conv_and_enc / small_conv
    backbone: vgg13
    imagenet_weights_path: # ${env:EXPERIMENT_ROOT_DIR}/pretrained_weights/vgg16-397923af.pth
    load_dg_backbone_path: #${exp.dir}/dg_backbone_2.ckpt  # ${env:EXPERIMENT_ROOT_DIR}/pretrained_weights/vgg16-397923af.pth
    save_dg_backbone_path: # ${exp.dir}/dg_backbone.ckpt # ${env:EXPERIMENT_ROOT_DIR}/pretrained_weights/vgg16-397923af.pth

test:
  name: test_results
  dir: ${exp.dir}/${test.name}
  cf_path: ${exp.dir}/hydra/config.yaml
  selection_criterion: "latest" #"best_valacc" #best_valacc # model selection criterion or "latest"
  selection_mode: #"l#max # model selection criterion or "latest"
  best_ckpt_path: ${exp.version_dir}/${test.selection_criterion}.ckpt # latest or best
  only_latest_version: True # if false looks for best metrics across all versions in exp_dir. Turn to false if resumed training.
  devries_repro_ood_split: False
  assim_ood_norm_flag: False
  iid_set_split: "devries" # all, devries

eval:
  performance_metrics:
    train: ["loss", "nll", "accuracy"] # train brier_score logging costs around 5% performance
    val: ["loss", "nll", "accuracy", "brier_score"]
    test: ["nll", "accuracy", "brier_score"]
  confid_metrics:
    train:
      ["failauc", "failap_suc", "failap_err", "fpr@95tpr", "e-aurc", "aurc"]
    val: ["failauc", "failap_suc", "failap_err", "fpr@95tpr", "e-aurc", "aurc"]
    test:
      [
        "failauc",
        "failap_suc",
        "failap_err",
        "mce",
        "ece",
        "e-aurc",
        "aurc",
        "fpr@95tpr",
      ]
  confidence_measures: # ["det_mcp" , "det_pe", "tcp" , "mcd_mcp", "mcd_pe", "mcd_ee", "mcd_mi", "mcd_sv"]
    train: ["det_mcp"] # mcd_confs not available due to performance. 'det_mcp' costs around 3% (hard to say more volatile)
    val: ["det_mcp"] # , "mcd_mcp", "mcd_pe", "mcd_ee", "mcd_mi", "mcd_sv"
    test: ["det_mcp", "det_pe", "ext"]

  monitor_plots: #"calibration",
    [
      #"overconfidence",
      "hist_per_confid",
    ]

  tb_hparams: ["fold"]
  ext_confid_name: "devries"
  test_conf_scaling: False
  val_tuning: True
  r_star: 0.25
  r_delta: 0.05

  query_studies: # iid_study, new_class_study, sub_class_study, noise_study
    iid_study: cifar10
    noise_study:
      - corrupt_cifar10
    new_class_study:
      - tinyimagenet_resize
      - cifar100
      - svhn
