# @package _global_
defaults:
  - override /data: wilds_camelyon_224_data

exp:
  group_name: vit
  name: camelyon

trainer:
  num_epochs:
  num_steps: 40000
  val_every_n_epoch: 10
  val_split: zhang
  learning_rate: 0.003
  lr_scheduler:
    name: "LinearWarmupCosineAnnealing" # "MultiStep" "CosineAnnealing"
    warmup_epochs: 500
    warmup_start_lr: 0
    eta_min: 0
    max_epochs: 40000
  momentum: 0.9
  weight_decay: 0.0
  batch_size: 128
  resume_from_ckpt: False
  benchmark: True # set to false if input size varies during training!
  fast_dev_run: False # True/Fals
  callbacks:
    model_checkpoint:
    confid_monitor:   # not nice: model_checkpoint callback depends on confid_mointor callback
    learning_rate_monitor:

model:
  name: vit_model

test:
  name: test_results
  dir: ${exp.dir}/${test.name}
  cf_path: ${exp.dir}/hydra/config.yaml
  raw_output_path: ${test.dir}/raw_output.npy
  external_confids_output_path: ${test.dir}/external_confids.npy
  selection_criterion: latest # model selection criterion or "latest"
  selection_mode: max # model selection criterion or "latest"
  best_ckpt_path: ${exp.version_dir}/${test.selection_criterion}.ckpt # latest or best
  only_latest_version: True # if false looks for best metrics across all versions in exp_dir. Turn to false if resumed training.
  devries_repro_ood_split: False
  assim_ood_norm_flag: False
  iid_set_split: "all"  # all, devries


eval:
  performance_metrics:
    train: ['loss', 'nll', 'accuracy'] # train brier_score logging costs around 5% performance
    val: ['loss', 'nll', 'accuracy', 'brier_score']
    test: ['nll', 'accuracy', 'brier_score']
  confid_metrics:
    train: ['failauc', 'failap_suc', 'failap_err', "fpr@95tpr"]
    val: ['failauc', 'failap_suc', 'failap_err', "fpr@95tpr",  "e-aurc", "aurc"]
    test: ['failauc', 'failap_suc', 'failap_err', "mce", "ece", "e-aurc", "aurc", "fpr@95tpr"]
  confidence_measures: # ["det_mcp" , "det_pe", "tcp" , "mcd_mcp", "mcd_pe", "mcd_ee", "mcd_mi", "mcd_sv"]
    train:
      ["det_mcp"] # mcd_confs not available due to performance. 'det_mcp' costs around 3% (hard to say more volatile)
    val:
      ["det_mcp", "ext"] # , "mcd_mcp", "mcd_pe", "mcd_ee", "mcd_mi", "mcd_sv"
    test:
      ["det_mcp" , "det_pe", "ext"]

  monitor_plots: [ #"calibration",
                   #"overconfidence",
                   "hist_per_confid"
                    ]

  tb_hparams: ['fold']
  ext_confid_name: "maha"

  query_studies: # iid_study, new_class_study, sub_class_study, noise_study
    iid_study: ${data.dataset}
    in_class_study: [wilds_camelyon_ood_test_224]
